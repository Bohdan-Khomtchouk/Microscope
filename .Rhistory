setwd("~/Desktop/BST640_project")
wine <- read.table("wine.txt", header=TRUE, sep=",")
head(wine)
wine <- read.table("wine.txt", header=FALSE, sep=",")
head(wine)
wines.numeric <- data.matrix(wines)
wine.numeric <- data.matrix(wine)
PCA <- prcomp(wine.numeric, scale=TRUE)
PCA$sdev ^ 2
head(PCA$rotation)
head(PCA$x)
summary(PCA)
biplot(PCA)
biplot(PCA, cex=c(1.5,1.5))
biplot(PCA, cex=c(0.75,0.75))
biplot(PCA, cex=c(0.5,0.5))
biplot(PCA, cex=c(0.4,0.4))
biplot(PCA, cex=c(0.75,0.75))
wines.numeric
head(wine.numeric)
head(wine.numeric[2:14])
wine[2:6]
wine_input <- read.table("wine.txt", header=FALSE, sep=",")
wine_input[2:14]
wine_input
wine.numeric <- data.matrix(wine_input[2:14])
wine.numeric
wine.numeric
wine.numeric
PCA <- prcomp(wine.numeric, scale=TRUE)
sum((wine.pca$sdev)^2)
sum((PCA$sdev)^2)
wine_input <- read.table("wine.txt", header=FALSE, sep=",")
wine.numeric <- data.matrix(wine_input[2:14])
PCA <- prcomp(wine.numeric, scale=TRUE)
PCA$sdev ^ 2
head(PCA$rotation)
head(PCA$x)
summary(PCA)
summary(PCA)
biplot(PCA, cex=c(0.75,0.75))
screeplot(PCA, type="lines")
install.packages("randomForest")
library(randomForest)
test <- wine_input[ c(1:12, 60:71, 131:142), ]
train <- wine_input[ c(13:59, 72:130, 143:178), ]
?randomForest
RF <- randomForest(wine_input, data=train, do.trace=TRUE, importance=TRUE)
RF <- randomForest(wine_input, data=train, do.trace=50, importance=TRUE)
RF
RF$confusion
names(RF)
RF$type
RF$confusion
RF$call
RF$type
RF$predicted
RF$err.rate
RF$confusion
RF$votes
wines_input
wine_input
RF <- randomForest(V1 ~ ., data=train, do.trace=50, importance=TRUE)
RF <- randomForest($V1 ~ ., data=train, do.trace=50, importance=TRUE)
RF <- randomForest(V1 ~ ., data=train, do.trace=50, importance=TRUE)
RF <- randomForest(V1 ~ ., data=train, do.trace=100, importance=TRUE)
RF <- randomForest(V1 ~ ., data=train, do.trace=20, importance=TRUE)
RF <- randomForest(V1 ~ ., data=train, do.trace=50, importance=TRUE)
RF$confusion
V1
wine_input$V1
wine_input$V1 <- as.factor(wine_input$V1)
RF <- randomForest(V1 ~ ., data=train, do.trace=50, importance=TRUE)
RF$confusion
RF <- randomForest(wine.input$V1 ~ ., data=train, do.trace=50, importance=TRUE)
V1 <- as.factor(wine_input$V1)
RF <- randomForest(V1 ~ ., data=train, do.trace=50, importance=TRUE)
library(randomForestSRC)
install.packages("randomForestSRC")
library(randomForestSRC)
library(mlbench)
rfsrc.obj <- rfsrc(V1  ̃ ., data = wine_input)
rfsrc.obj <- rfsrc(V1 ̃ ., data = wine_input)
RF <- rfsrc(V1 ~ ., data = wine_input)
RF
names(RF)
?rfsrc
head(RF$importance)
RF$importance
RF$family
RF$err.rate
head(RF$err.rate)
names(RF)
RF$membership
names(RF)
data("BostonHousing")
head(BostonHousing)
BostonHousing
wine_input
RF2 <- rfsrc(V1 ~ ., data = wine_input, na.action = "na.impute")
RF2
RF3 <- rfsrc(V1 ~ ., data = wine_input, nsplit = 10)
plot(RF3)
plot(RF1)
plot(RF)
plot(RF3)
plot(RF)
RF3$call
RF1$call
RF$call
RF <- rfsrc(V1 ~ ., data = wine_input, nsplit = 10)
RF
RF$importance
head(RF$err.rate)
plot(RF)
plot(RF)
plot(PCA$x[,1],PCA$x[,2])
text(PCA$x[,1],PCA$x[,2], wine_input$V1, col="blue")
text(PC1,PC2, wine_input$V1, col="blue")
?text
text(PC1,PC2, labels = seq_along(x), wine_input$V1, col="blue")
text(PCA$x[,1],PCA$x[,2], labels = seq_along(x), wine_input$V1, col="blue")
text(PCA$x[,1],PCA$x[,2], labels = seq_along(PCA$x[,1]), wine_input$V1, col="blue")
PCA$rotation[,1]
setwd("~/Desktop/Microscope")
install.packages("d3heatmap")
install.packages("shiny")
library(shiny)
runApp("microscope")
runApp("microscope")
runApp("microscope")
setwd("~/Desktop/Microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
ui <- fluidPage(
h1("A heatmap demo"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
checkboxInput("cluster", "Apply clustering"),
d3heatmapOutput("heatmap")
)
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
) })
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
) })
}
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?palette
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
palette()
?palette
palette(rainbow(6))
palette()
palette(pie(rep(1,n), col=heat.colors(n)))
palette(pie(rep(1,50), col=heat.colors(50)))
palette()
palette
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
palette("default")
palette()
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?input
?input
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
setwd("~/Documents/Microscope")
runApp("microscope")
setwd("~/Documents/Microscope/microscope/newUI")
runApp("microscope")
setwd("~/Documents/Microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
?checkboxInput
runApp("microscope")
?d3heatmap
runApp("microscope")
runApp("microscope")
library(grDevices)
grDevices::col2rgb("green")
grDevices::col2rgb("black")
grDevices::col2rgb("red")
col2rgb(green, alpha = FALSE)
col2rgb("green", alpha = FALSE)
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
input$cluster
cluster
runApp("microscope")
runApp("microscope")
runApp("microscope")
?selectInput
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
install.packages("marrayPlots")
rbg <- maPalette(low="green", high="red", mid="black")
rbg <- maPalette(low="green", high="red", mid="black")
runApp("microscope")
?showpanel
runApp("microscope")
runApp("microscope")
install.packages("marray")
install.packages("gplots")
runApp("microscope")
library(gplots)
runApp("microscope")
runApp("microscope")
install.packages("marray")
runApp("microscope")
runApp("microscope")
runApp("microscope")
showpanel <- function(Colors)
{
image(matrix(1:length(Colors), ncol=1), col=Colors, xaxt="n", yaxt="n" )
}
showpanel
showpanel(redgreen(64))
showpanel(colorRampPalette( c("green", "black", "red"), space="rgb")(64))
runApp("microscope")
runApp("microscope")
runApp("microscope")
runApp("microscope")
install.packages("marray")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(installr)
install.packages("installr")
version
